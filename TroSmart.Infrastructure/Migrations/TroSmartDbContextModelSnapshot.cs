// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TroSmart.Infrastructure.Persistence.Context;

#nullable disable

namespace TroSmart.Infrastructure.Migrations
{
    [DbContext(typeof(TroSmartDbContext))]
    partial class TroSmartDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TroSmart.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("ConversationMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("address_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("AddressDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("address_details");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<double?>("LocationLatitude")
                        .HasColumnType("float")
                        .HasColumnName("location_latitude");

                    b.Property<double?>("LocationLongitude")
                        .HasColumnType("float")
                        .HasColumnName("location_longitude");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("province");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("ward");

                    b.HasKey("Id");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Attention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("attention_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("listing_id");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("property_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ListingId");

                    b.HasIndex("PropertyId");

                    b.ToTable("attentions", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("booking_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("PersonBookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("person_booking_id");

                    b.Property<Guid>("PersonScheduledId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("person_scheduled_id");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("property_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PersonBookingId");

                    b.HasIndex("PersonScheduledId");

                    b.HasIndex("PropertyId");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("contact_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("listing_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("conversation_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("conversations", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.ConversationMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("conversation_member_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ConversationId");

                    b.ToTable("conversation_members", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.History", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("history_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("listing_id");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("property_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.HasIndex("PropertyId");

                    b.ToTable("histories", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("image_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("property_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Listing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("listing_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("approved_by_id");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("contact_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("PostById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("post_by_id");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("property_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("PostById");

                    b.HasIndex("PropertyId");

                    b.ToTable("listings", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("message_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sender_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("package_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.ToTable("packages", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("payment_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transaction_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TransactionId");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("property_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("properties", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("review_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("property_id");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reviewer_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("subscription_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("listing_id");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("package_id");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.HasIndex("PackageId");

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transaction_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("voucher_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("vouchers", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.VoucherTranscation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("voucher_transaction_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.HasIndex("VoucherId");

                    b.ToTable("voucher_transactions", (string)null);
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.VoucherUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherUsers");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Account", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Attention", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Account", "Account")
                        .WithMany("Attentions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_attentions_accounts_account_id");

                    b.HasOne("TroSmart.Domain.Entities.Listing", "Listing")
                        .WithMany("Attentions")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_attentions_listings_listing_id");

                    b.HasOne("TroSmart.Domain.Entities.Property", "Property")
                        .WithMany("Attentions")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_attentions_properties_property_id");

                    b.Navigation("Account");

                    b.Navigation("Listing");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Booking", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Account", "PersonBooking")
                        .WithMany("PersonBookings")
                        .HasForeignKey("PersonBookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_bookings_person_booking");

                    b.HasOne("TroSmart.Domain.Entities.Account", "PersonScheduled")
                        .WithMany("ScheduledBookings")
                        .HasForeignKey("PersonScheduledId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_bookings_person_scheduled");

                    b.HasOne("TroSmart.Domain.Entities.Property", "Property")
                        .WithMany("Bookings")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PersonBooking");

                    b.Navigation("PersonScheduled");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Contact", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Listing", "Listing")
                        .WithMany("Contacts")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.ConversationMember", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Account", "Account")
                        .WithMany("ConversationMembers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TroSmart.Domain.Entities.Conversation", "Conversation")
                        .WithMany("ConversationMembers")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Customer", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("TroSmart.Domain.Entities.Customer", "AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Employee", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Account", "Account")
                        .WithOne("Employee")
                        .HasForeignKey("TroSmart.Domain.Entities.Employee", "AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.History", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Listing", "Listing")
                        .WithMany("Histories")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TroSmart.Domain.Entities.Property", "Property")
                        .WithMany("Histories")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Listing");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Image", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Listing", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Account", "ApprovedBy")
                        .WithMany("ListingApprove")
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TroSmart.Domain.Entities.Account", "PostBy")
                        .WithMany("ListingPost")
                        .HasForeignKey("PostById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TroSmart.Domain.Entities.Property", "Property")
                        .WithMany("Listings")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("PostBy");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Message", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TroSmart.Domain.Entities.Account", "Sender")
                        .WithMany("SenderMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Payment", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Account", "Account")
                        .WithMany("Payments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TroSmart.Domain.Entities.Transaction", "Transaction")
                        .WithMany("Payments")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Property", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Address", "Address")
                        .WithMany("Properties")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Review", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TroSmart.Domain.Entities.Account", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Subscription", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Listing", "Listing")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_subscriptions_listings_listing_id");

                    b.HasOne("TroSmart.Domain.Entities.Package", "Package")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Listing");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Subscription", "Subscription")
                        .WithMany("Transactions")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.VoucherTranscation", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Transaction", "Transaction")
                        .WithMany("VoucherTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TroSmart.Domain.Entities.Voucher", "Voucher")
                        .WithMany("VoucherTransactions")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Transaction");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.VoucherUser", b =>
                {
                    b.HasOne("TroSmart.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TroSmart.Domain.Entities.Voucher", "Voucher")
                        .WithMany("VoucherUsers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Account", b =>
                {
                    b.Navigation("Attentions");

                    b.Navigation("ConversationMembers");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("ListingApprove");

                    b.Navigation("ListingPost");

                    b.Navigation("Payments");

                    b.Navigation("PersonBookings");

                    b.Navigation("Reviews");

                    b.Navigation("ScheduledBookings");

                    b.Navigation("SenderMessages");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Address", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("ConversationMembers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Listing", b =>
                {
                    b.Navigation("Attentions");

                    b.Navigation("Contacts");

                    b.Navigation("Histories");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Package", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Property", b =>
                {
                    b.Navigation("Attentions");

                    b.Navigation("Bookings");

                    b.Navigation("Histories");

                    b.Navigation("Images");

                    b.Navigation("Listings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Subscription", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("VoucherTransactions");
                });

            modelBuilder.Entity("TroSmart.Domain.Entities.Voucher", b =>
                {
                    b.Navigation("VoucherTransactions");

                    b.Navigation("VoucherUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
